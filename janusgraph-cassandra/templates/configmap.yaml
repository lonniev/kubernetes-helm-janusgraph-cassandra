{{- /*
Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if (empty .Values.configMapOverrideName) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
  janusgraph-{{ .Values.janusPropsTemplate }}-server.properties: |+
    gremlin.graph=org.janusgraph.core.JanusGraphFactory

    {{- if .Values.secretKeyRefs.superuser }}
    storage.username={{ include "janusgraph.secretValue" (dict "Namespace" .Values.secretKeyRefs.superuser.namespace "Name" .Values.secretKeyRefs.superuser.name "Key" "username" ) | default "cassandra" }}
    storage.password={{ include "janusgraph.secretValue" (dict "Namespace" .Values.secretKeyRefs.superuser.namespace "Name" .Values.secretKeyRefs.superuser.name "Key" "password" ) | default "cassandra" }}
    {{- end }}
    
    {{- range $key, $val := .Values.properties }}
    {{ $key }}={{ $val }}
    {{- end }}

    {{- range $key, $val := .Values.indexingProperties }}
    {{ $key }}={{ $val }}
    {{- end }}

  janusgraph-{{ index .Values.properties "storage.backend" }}-configurationmanagement.properties: |+
    gremlin.graph=org.janusgraph.core.ConfiguredGraphFactory
    graph.graphname=ConfigurationManagementGraph

    {{- if .Values.secretKeyRefs.superuser }}
    storage.username={{ include "janusgraph.secretValue" (dict "Namespace" .Values.secretKeyRefs.superuser.namespace "Name" .Values.secretKeyRefs.superuser.name "Key" "username" ) | default "cassandra" }}
    storage.password={{ include "janusgraph.secretValue" (dict "Namespace" .Values.secretKeyRefs.superuser.namespace "Name" .Values.secretKeyRefs.superuser.name "Key" "password" ) | default "cassandra" }}
    {{- end }}
    
    {{- range $key, $val := .Values.properties }}
    {{ $key }}={{ $val }}
    {{- end }}

  gremlin-server.yaml: |+
    host: 0.0.0.0
    port: 8182
    scriptEvaluationTimeout: 30000
    channelizer: org.janusgraph.channelizers.JanusGraphWsAndHttpChannelizer
    graphManager: org.janusgraph.graphdb.management.JanusGraphManager
    graphs: 
      ConfigurationManagementGraph: /opt/janusgraph/conf/gremlin-server/janusgraph-{{ index .Values.properties "storage.backend" }}-configurationmanagement.properties
    scriptEngines: {
      gremlin-groovy: {
        plugins: { org.janusgraph.graphdb.tinkerpop.plugin.JanusGraphGremlinPlugin: {},
                   org.apache.tinkerpop.gremlin.server.jsr223.GremlinServerGremlinPlugin: {},
                   org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},
                   org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},
{{- if (lookup "v1" "ConfigMap" .Release.Namespace "janusgraph-customscripts-config") }}
                   org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [
{{- range $file, $script := coalesce (get (coalesce (lookup "v1" "ConfigMap" .Release.Namespace "janusgraph-customscripts-config") dict) "data") dict -}}
                      customscripts/{{- $file -}}, 
{{- end -}}
                     ]}
{{- else -}}
                   org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}
{{- end -}}
        }}}
    serializers:
{{- range $className, $configs := .Values.serializerAdditions }}
      - { className: {{ $className }}, {{ $local := dict "first" true }}config: { {{ range $key, $value := $configs }}{{ if not $local.first }}, {{ end }}{{ $key }}: {{ $value }}{{ $_ := set $local "first" false }}{{ end }} } }
{{- end }}
      - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}
      - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}
      - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}
    processors:
      - { className: org.apache.tinkerpop.gremlin.server.op.session.SessionOpProcessor, config: { sessionTimeout: 28800000 }}
      - { className: org.apache.tinkerpop.gremlin.server.op.traversal.TraversalOpProcessor, config: { cacheExpirationTime: 600000, cacheMaxSize: 1000 }}
    metrics: {
      consoleReporter: {enabled: false, interval: 180000},
      csvReporter: {enabled: false, interval: 180000, fileName: /tmp/gremlin-server-metrics.csv},
      jmxReporter: {enabled: true},
      slf4jReporter: {enabled: false, interval: 180000},
      gangliaReporter: {enabled: false, interval: 180000, addressingMode: MULTICAST},
      graphiteReporter: {enabled: false, interval: 180000}}
    maxInitialLineLength: 4096
    maxHeaderSize: 8192
    maxChunkSize: 8192
    maxContentLength: 65536
    maxAccumulationBufferComponents: 1024
    resultIterationBatchSize: 64
    writeBufferLowWaterMark: 32768
    writeBufferHighWaterMark: 65536

  log4j-server.properties: |+
    log4j.appender.console=org.apache.log4j.ConsoleAppender
    log4j.appender.console.Threshold={{ default "INFO" .Values.debugLevel }}
    log4j.appender.console.layout=org.apache.log4j.PatternLayout
    log4j.appender.console.layout.ConversionPattern=%d{DATE} [%t] %-5p %c %x - %m%n

    log4j.rootLogger={{ default "INFO" .Values.debugLevel }}, console
{{- end -}}